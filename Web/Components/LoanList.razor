@using LoanManagement.Core.Models

<div class="shadow-sm border-gray-200 border rounded-lg bg-white">
    <div class="p-6 border-b border-gray-200">
        <div class="flex justify-between items-center">
            <div>
                <h2 class="text-xl text-gray-800 font-semibold">Active Loans</h2>
                <p class="text-gray-500">
                    @Loans.Count() total loans
                </p>
            </div>
        </div>
    </div>
    
    <div class="p-6">
        @if (IsLoading)
        {
            <div class="flex justify-center p-8">
                <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
            </div>
        }
        else if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
                @ErrorMessage
            </div>
        }
        else
        {
            <div class="overflow-x-auto">
                <table class="w-full">
                    <thead>
                        <tr class="border-b border-gray-200 hover:bg-gray-50">
                            <th class="text-gray-600 font-medium p-3 text-left">LOAN ID</th>
                            <th class="text-gray-600 font-medium p-3 text-left">CLIENT</th>
                            <th class="text-gray-600 font-medium p-3 text-left">TYPE</th>
                            <th class="text-gray-600 font-medium p-3 text-left">AMOUNT</th>
                            <th class="text-gray-600 font-medium p-3 text-left">STATUS</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var loan in Loans)
                        {
                            <tr class="border-b border-gray-200 hover:bg-gray-50 cursor-pointer"
                                @onclick="() => OnLoanSelected.InvokeAsync(loan)">
                                <td class="font-medium text-gray-800 p-3">@loan.Id</td>
                                <td class="text-gray-700 p-3">@loan.ClientName</td>
                                <td class="text-gray-700 p-3">
                                    <span class="border-gray-200 text-gray-600 border rounded-full px-2 py-1 text-xs">
                                        @loan.Type
                                    </span>
                                </td>
                                <td class="text-gray-700 font-medium p-3">₱@loan.Amount.ToString("N0")</td>
                                <td class="p-3">
                                    @GetStatusBadge(loan.Status)
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public IEnumerable<Loan> Loans { get; set; } = Enumerable.Empty<Loan>();

    [Parameter]
    public bool IsLoading { get; set; }

    [Parameter]
    public string? ErrorMessage { get; set; }

    [Parameter]
    public EventCallback<Loan> OnLoanSelected { get; set; }

    private MarkupString GetStatusBadge(LoanStatus status)
    {
        return status switch
        {
            LoanStatus.Approved => new MarkupString(
                "<span class=\"bg-green-100 text-green-800 rounded-full px-2 py-1 text-xs flex items-center gap-1\">" +
                "<span class=\"h-2 w-2 rounded-full bg-green-500\"></span>" +
                "Approved</span>"),
                
            LoanStatus.Pending => new MarkupString(
                "<span class=\"bg-yellow-100 text-yellow-800 rounded-full px-2 py-1 text-xs flex items-center gap-1\">" +
                "<span class=\"h-2 w-2 rounded-full bg-yellow-500\"></span>" +
                "Pending</span>"),
                
            _ => new MarkupString(
                "<span class=\"bg-red-100 text-red-800 rounded-full px-2 py-1 text-xs flex items-center gap-1\">" +
                "<span class=\"h-2 w-2 rounded-full bg-red-500\"></span>" +
                "Rejected</span>")
        };
    }
}